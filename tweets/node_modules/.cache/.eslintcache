[{"C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\index.js":"1","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\App.js":"2","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\reportWebVitals.js":"3","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\components\\OverallAnalysis.js":"4","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\components\\pagination.js":"5"},{"size":500,"mtime":1638729099172,"results":"6","hashOfConfig":"7"},{"size":22866,"mtime":1639263598337,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1638729099406,"results":"9","hashOfConfig":"7"},{"size":3056,"mtime":1639260487720,"results":"10","hashOfConfig":"7"},{"size":3088,"mtime":1639245278946,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4yxk9a",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\index.js",[],"C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\App.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"],"import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Navbar, Nav, Form, InputGroup, FormControl, FormGroup, Row, Col, Container, Tabs, Tab } from 'react-bootstrap';\nimport { useState, useRef, useLayoutEffect } from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport axios from \"axios\";\nimport Pagination from './components/pagination';\nimport OverallAnalysis from './components/OverallAnalysis';\nimport BlockUi from 'react-block-ui';\nimport 'react-block-ui/style.css';\nfunction App() {\n  const ref = useRef(null)\n  const [block, setBlock] = useState(false)\n  const [keyword, setKeyword] = useState(\"\")\n  const [flag, setFlag] = useState(false)\n  const [navlink, setNavlink] = useState(true)\n  const [poi, setPoi] = useState(\"\")\n  const [country, setCountry] = useState(\"\")\n  const [query_data, setQuery_data] = useState([])\n  const [active, setActive] = useState(1)\n  const [page, setPages] = useState()\n  const [pagination, setPagination] = useState(false)\n  const [tKey, settKey] = useState(\"POI\")\n  const [poi_flag, setpoi_flag] = useState(true)\n  const [news,setnews]=useState([])\n  const [news_data,setnews_data]=useState([])\n  const [colors, setColors] = useState([\n    \"#99ff99\",\n    \"#ff9999\",\n    \"#66a3ff\",\n    \"#800080\",\n    \"#FFFF00\",\n    \"#00FF00\",\n    \"#FF00FF\",\n    \"#FFC0CB\",\n    \"#FFA500\",\n    \"#800000\",\n    \"#008000\",\n    \"#7FFD4\",\n    \"#808000\",\n    \"#808080\",\n    \"#FFFFFF\",\n    \"#A52A2A\"\n  ])\n\n const [p_n_sentiment,setp_n_sentiment] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [p_n_political,setp_n_political] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [p_n_v_info,setp_n_v_info] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [v_hecitancy,setv_hecitancy] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n  const [query_POI_vs_tweet_count, setQuery_POI_vs_tweet_count] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n  const [querysumsentiment, setquerysumsentiment] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n  const [query_country_vs_tweet_count, setQuery_country_vs_tweet_count] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n  const [Overall_POI_vs_tweet_count, setOverall_POI_vs_tweet_count] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [Overall_country_vs_tweet_count, setOverall_country_vs_tweet_count] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [Overall_language_vs_tweet_count, setOverall_language_vs_tweet_count] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n  const [querytweetsentiment, setQuerytweetsentiment] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const [state, setState] = useState({\n    labels: [], datasets: [\n      {\n        label: '',\n        backgroundColor: 'rgb(54, 162, 235)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n    ]\n  })\n\n  const setResonseData = (data, i) => {\n    let keys = Object.keys(data)\n    let vals = Object.values(data)\n    let lab = []\n    let dat = []\n    let bcolor = []\n\n    for (let i = 0; i < keys.length; i++) {\n      if (vals[i] > 0) {\n        lab.push(keys[i]);\n        dat.push(vals[i])\n      }\n      bcolor.push(colors[i])\n    }\n    if (i == 1) {\n      setQuery_POI_vs_tweet_count({\n        labels: lab, datasets: [\n          {\n            label: 'Query_POI_vs_tweet_count',\n            backgroundColor: bcolor,\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 1,\n            data: dat\n          }\n        ]\n      })\n\n    }\n    else if (i == 2) {\n      setQuery_country_vs_tweet_count({\n        labels: lab, datasets: [\n          {\n            label: 'Query_country_vs_tweet_count',\n            backgroundColor: bcolor,\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 1,\n            data: dat\n          }\n        ]\n      })\n    }\n    else if (i == 4) {\n      let l = ['postive_tweet_percentage', 'neutral_tweet_percentage', 'negative_tweet_percentage']\n      let d = []\n      d.push(vals[0])\n      d.push(vals[2])\n      d.push(vals[3])\n      console.log(\"dileep\")\n      setQuerytweetsentiment({\n        labels: l, datasets: [\n          {\n            label: 'Query_country_vs_tweet_count',\n            backgroundColor: bcolor,\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 1,\n            data: d\n          }\n        ]\n      })\n      let l1 = [\"sum_of_positive_sentiment\", \"sum_of_negative_sentiment\"]\n      let d1 = []\n      d1.push(vals[1])\n      d1.push((vals[4])*-1)\n      console.log(vals)\n      setquerysumsentiment({\n        labels: l1, datasets: [\n          {\n            label: 'Query_country_vs_tweet_count',\n            backgroundColor: bcolor,\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 1,\n            data: d1\n          }\n        ]\n      })\n\n    }\n    handlenotsetBlock()\n  }\n  const [baseURL, setBaseUrl] = useState(\"http://18.217.156.180:8000/search/\")\n  const getSerachResults = async() => {\n    console.log(country)\n    try{\n\n    \n    await axios\n      .post(baseURL, JSON.stringify({\n        \"poi_name\": poi,\n        \"country\": country,\n        \"search_query\": keyword,\n        \"start\": 0,\n        \"poi_flag\": true\n      }))\n      .then((response) => {\n        console.log(response)\n        let num = response.data.response.numFound\n        let size = Math.floor(num / 10)\n        if (num % 10 == 0) {\n          setPages(size)\n        }\n        else {\n          setPages(size + 1)\n        }\n        setQuery_data(response.data.response.docs);\n        let response_keys = Object.keys(response.data)\n        for (let i = 0; i < response_keys.length; i++) {\n          if (response_keys[i] != 'response') {\n            setResonseData(response.data[response_keys[i]], i)\n          }\n\n        }\n\n      })\n\n     axios.get(`https://gnews.io/api/v4/search?q=${keyword}&token=f853c18f30683375a6c87b483f74e432`).then((response)=>{\n      console.log(response)\n      let resp=response.data.articles\n      setnews(resp)\n      let data=[]\n      for(let i=0; i<10;i++){\n        data.push(resp[i])\n      }\n      setnews_data(data)\n    })\n  }\n  catch{\n    handlenotsetBlock()\n  }\n  }\n  const getGeneralResults = () => {\n    console.log(poi_flag)\n    axios\n      .post(baseURL, JSON.stringify({\n        \"poi_name\": poi,\n        \"country\": country,\n        \"search_query\": keyword,\n        \"start\": 0,\n        \"poi_flag\": false\n      }))\n      .then((response) => {\n        console.log(response)\n        let num = response.data.response.numFound\n        let size = Math.floor(num / 10)\n        if (num % 10 == 0) {\n          setPages(size)\n        }\n        else {\n          setPages(size + 1)\n        }\n        setQuery_data(response.data.response.docs);\n        let response_keys = Object.keys(response.data)\n        for (let i = 0; i < response_keys.length; i++) {\n          if (response_keys[i] != 'response') {\n            setResonseData(response.data[response_keys[i]], i)\n          }\n\n        }\n\n      })\n  }\n  const handlePageChange = (page, flag) => {\n    handlesetBlock()\n    let p = 0\n    if (flag == 0) {\n      p = page - 1;\n    }\n    else if (flag == 1) {\n      p = page;\n    }\n    else if (flag == 2) {\n      p = page - 2;\n    }\n    axios.post(baseURL, JSON.stringify({\n      \"poi_name\": poi,\n      \"country\": country,\n      \"search_query\": keyword,\n      \"start\": (p) * 10,\n      \"poi_flag\": poi_flag\n    }))\n      .then((response) => {\n        setQuery_data(response.data.response.docs);\n        handlenotsetBlock()\n        setResonseData(response.data.query_sentiment_analysis, 4)\n      })\n  }\n\n  // const handleBlock=()=>{\n  //   setBlock(true)\n  // }\n  const handleSearch = () => {\n    console.log(ref.current)\n    if (flag) {\n      // ref.current.changePage()\n      setPagination(true)\n    }\n    handlesetBlock()\n    setFlag(true);\n    getSerachResults();\n\n  }\n  const handlePagination = () => {\n    setPagination(false)\n  }\n  const countries_dropdown = [\"USA\", \"INDIA\", \"MEXICO\"]\n  const pois_dropdown = [\"narendramodi\", \"drharshvardhan\",\n    \"MoHFW_INDIA\",\n    \"ysjagan\",\n    \"smritiirani\",\n    \"HHSGov\",\n    \"JoeBiden\",\n    \"KamalaHarris\",\n    \"XavierBecerra\",\n    \"GavinNewsom\",\n    \"lopezobrador_\",\n    \"SSaludCdMx\",\n    \"SSalud_mx\",\n    \"SecSaludBAQ\",\n    \"MartinOrozcoAgs\"]\n\n  const getOverviewData = () => {\n     axios\n      .post(\"http://18.217.156.180:8000/overview/\", JSON.stringify({\n        \"poi_name\": \"*\",\n        \"country\": \"\",\n        \"search_query\": \"\",\n        \"start\": 0\n      }))\n      .then((response) => {\n        console.log(response)\n        if (response.data.Overall_POI_vs_tweet_count) {\n          let bcolor = []\n          for (let i = 0; i < Object.keys(response.data.Overall_POI_vs_tweet_count).length; i++) {\n            bcolor.push(colors[i])\n          }\n          console.log(bcolor)\n          setOverall_POI_vs_tweet_count({\n            labels: Object.keys(response.data.Overall_POI_vs_tweet_count), datasets: [\n              {\n                label: 'Overall_POI_vs_tweet_count',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: Object.values(response.data.Overall_POI_vs_tweet_count)\n              }\n            ]\n          })\n        }\n\n        if (response.data.Overall_country_vs_tweet_count) {\n          let bcolor = []\n          for (let i = 0; i < Object.keys(response.data.Overall_country_vs_tweet_count).length; i++) {\n            bcolor.push(colors[i])\n          }\n          console.log(bcolor)\n          setOverall_country_vs_tweet_count({\n            labels: Object.keys(response.data.Overall_country_vs_tweet_count), datasets: [\n              {\n                label: 'Overall_POI_vs_tweet_count',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: Object.values(response.data.Overall_country_vs_tweet_count)\n              }\n            ]\n          })\n        }\n        if (response.data.Overall_language_vs_tweet_count) {\n          let bcolor = []\n          for (let i = 0; i < Object.keys(response.data.Overall_language_vs_tweet_count).length; i++) {\n            bcolor.push(colors[i])\n          }\n          console.log(bcolor)\n          setOverall_language_vs_tweet_count({\n            labels: Object.keys(response.data.Overall_language_vs_tweet_count), datasets: [\n              {\n                label: 'Overall_country_vs_tweet_count',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: Object.values(response.data.Overall_language_vs_tweet_count)\n              }\n            ]\n          })\n        }\n\n\n        if (response.data.Overall_insights) {\n\n          let keys=Object.keys(response.data.Overall_insights)\n\n          let values=Object.values(response.data.Overall_insights)\n\n          let bcolor = []\n          for (let i = 0; i < 2; i++) {\n            bcolor.push(colors[i])\n          }\n\n          let p_keysenti=[]\n          p_keysenti.push(keys[0])\n          p_keysenti.push(keys[1])\n\n          let p_valsenti=[]\n          p_valsenti.push(values[0])\n          p_valsenti.push(values[1])\n\n          let p_keysenti1=[]\n          p_keysenti1.push(keys[2])\n          p_keysenti1.push(keys[3])\n\n          let p_valsenti1=[]\n          p_valsenti1.push(values[2])\n          p_valsenti1.push(values[3])\n\n          let p_keysenti2=[]\n          p_keysenti2.push(keys[4])\n          p_keysenti2.push(keys[5])\n\n          let p_valsenti2=[]\n          p_valsenti2.push(values[4])\n          p_valsenti2.push(values[5])\n\n          let p_keysenti3=[]\n          p_keysenti3.push(keys[5])\n          p_keysenti3.push(keys[6])\n\n          let p_valsenti3=[]\n          p_valsenti3.push(values[5])\n          p_valsenti3.push(values[6])\n\n\n          setp_n_sentiment({\n            labels: p_keysenti, datasets: [\n              {\n                label: 'overall sentiment analysis',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: p_valsenti\n              }\n            ]\n          })\n\n          setp_n_political({\n            labels: p_keysenti1, datasets: [\n              {\n                label: 'overall policatal rhetoric analysis',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: p_valsenti1\n              }\n            ]\n          })\n\n          setp_n_v_info({\n            labels: p_keysenti2, datasets: [\n              {\n                label: 'overall vaccine disinfo analysis',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: p_valsenti2\n              }\n            ]\n          })\n\n          setv_hecitancy({\n            labels: p_keysenti3, datasets: [\n              {\n                label: 'overall Persuation against vaccine disinfo analysis',\n                backgroundColor: bcolor,\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data: p_valsenti3\n              }\n            ]\n          })\n\n\n\n          // let bcolor = []\n          // for (let i = 0; i < Object.keys(response.data.Overall_language_vs_tweet_count).length; i++) {\n          //   bcolor.push(colors[i])\n          // }\n          // console.log(bcolor)\n          // setOverall_language_vs_tweet_count({\n          //   labels: Object.keys(response.data.Overall_language_vs_tweet_count), datasets: [\n          //     {\n          //       label: 'Overall_country_vs_tweet_count',\n          //       backgroundColor: bcolor,\n          //       borderColor: 'rgba(0,0,0,1)',\n          //       borderWidth: 2,\n          //       data: Object.values(response.data.Overall_language_vs_tweet_count)\n          //     }\n          //   ]\n          // })\n        }\n\n        handlenotsetBlock()\n      })\n  }\n  const handleOverview = () => {\n    handlesetBlock()\n    setNavlink(false)\n    getOverviewData()\n  }\n  const handlesetBlock = () => {\n    setBlock(true)\n  }\n  const handlenotsetBlock = () => {\n    setBlock(false)\n  }\n  return (\n    <div>\n      <BlockUi tag=\"div\" blocking={block}>\n        <div>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Container>\n              <Navbar.Brand>Twitter</Navbar.Brand>\n              <Nav className=\"me-auto\">\n                <Nav.Link onClick={() => setNavlink(true)}>Home</Nav.Link>\n                <Nav.Link onClick={handleOverview}>Overview Analytics</Nav.Link>\n              </Nav>\n            </Container>\n          </Navbar>\n        </div>\n\n        {navlink &&\n          <div>\n            <div className={flag ? 'top-screen' : 'center-screen'}>\n\n              <FormGroup style={{ width: \"90%\", display: 'flex', marginLeft: '5em', marginTop: '1em' }}>\n                <InputGroup style={{ width: flag ? '30%' : '80%', height: \"70%\" }}>\n                  <FormControl\n                    value={keyword}\n                    placeholder=\"Search\"\n                    aria-label=\"keyword\"\n                    aria-describedby=\"basic-addon1\"\n                    onChange={(e) => { setKeyword(e.target.value) }}\n                  />\n                </InputGroup>\n                <Button style={{ marginLeft: '10px', width: \"6em\", height: '2.4em' }} disabled={keyword!=\"\"?false:true} onClick={handleSearch}>Search</Button>\n\n                {flag && <div style={{ display: 'flex', marginLeft: '6%' }}>\n                  <Form.Group style={{ display: 'flex' }}>\n                    <Form.Label>POI</Form.Label>\n                    <Form.Select value={poi} onChange={(e) => setPoi(e.target.value)} style={{ marginLeft: '0.5em', width: \"11em\", marginRight: '0.5em' }}>\n                      <option value=\"\">Choose...</option>\n                      {pois_dropdown.map((poii, i) =>\n                        <option key={i} value={poii}>{poii}</option>\n                      )\n                      }\n                    </Form.Select>\n                  </Form.Group>\n                  <Form.Group style={{ display: 'flex' }}>\n                    <Form.Label>Country</Form.Label>\n                    <Form.Select value={country} onChange={(e) => setCountry(e.target.value)} style={{ marginLeft: '0.5em', width: \"11em\", marginRight: '0.5em' }}>\n                      <option value=\"\">Choose...</option>\n                      {countries_dropdown.map((countr, i) =>\n                        <option key={i} value={countr}>{countr}</option>\n                      )\n                      }\n                    </Form.Select>\n                  </Form.Group>\n                </div>\n                }\n              </FormGroup>\n\n            </div>\n\n\n            {flag && <Container>\n\n              <Row>\n                <Col xs={4} sm={4} >\n                  <b>Tweets Search Results</b>\n                  <hr></hr>\n                  <Tabs\n                    id=\"controlled-tab-example\"\n                    activeKey={tKey}\n                    onSelect={(k) => {\n                      settKey(k);\n                      console.log(k)\n                      if (k == \"POI\") {\n                        handlesetBlock()\n                        setpoi_flag(true)\n                        getSerachResults()\n                      }\n                      else if (k == \"General\") {\n                        handlesetBlock()\n                        setpoi_flag(false);\n                        getGeneralResults()\n                      }\n                    }}\n                    className=\"mb-3\"\n                  >\n                    <Tab eventKey=\"POI\" title=\"POI Results\">\n                    </Tab>\n                    <Tab eventKey=\"General\" title=\"General Results\">\n                    </Tab>\n                  </Tabs>\n                  {query_data.length>0 && query_data.map((res, i) =>\n                    <>\n                      <p key={i}><b key={i}>{'@' + res.poi_name ? res.poi_name : \"General\"}</b> <br></br>\n                        <p style={{ fontSize: \"0.8em\" }}>{res.tweet_text}</p>\n                        <p style={{ fontSize: \"0.8em\" }}>Sentiment: {res.sentiment}</p>\n                      </p>\n                    </>\n                  )\n                  }\n                  {query_data.length>0 &&\n                    <Pagination pages={page} handlePageChange={handlePageChange} pagination={pagination} handlePagination={handlePagination} ref={ref}></Pagination>\n                  }\n                </Col>\n                <Col xs={4} sm={4}>\n                  <b>News Search Results</b>\n                  <hr></hr>\n                  { news && news_data.map((res,i)=>\n                  <>\n                  <p key={i}><b key={i}>{'@' + res.source.name}</b> <br></br>\n                        <p style={{ fontSize: \"0.8em\" }}>{res.content}</p>\n\n                      </p>\n                  </>\n                  )\n                  }\n                </Col>\n                <Col xs={4} sm={4}>\n                  <b> Search Results Analysis</b>\n                  <hr></hr>\n                  \n                  {query_data.length>0 && poi_flag && \n                  <>\n                  <br/>\n                  <b style={{marginLeft:\"5em\"}}>Plot for POI tweets Count</b>\n                  <Bar\n                    data={query_POI_vs_tweet_count}\n                  />\n                  </>\n                  }\n                  {query_data.length>0 &&\n                  <>\n                  <br/>\n                  <b style={{marginLeft:\"5em\"}}>Plot for Country wise tweet Count</b>\n                    <Bar\n                      data={query_country_vs_tweet_count}\n                    ></Bar>\n                    </>\n                  }\n                  {query_data.length>0 &&\n                  <>\n                  <br/>\n                  <b style={{marginLeft:\"5em\"}}>Plot for tweet sentiment </b>\n                    <Pie  data={querytweetsentiment}></Pie>\n                \n                  </>\n}\n                  \n                  {\n                    query_data.length>0 &&\n                    <>\n                    <br/>\n                    <b style={{marginLeft:\"1em\"}}>Plot for sum of overall tweet sentiment</b>\n                    <Bar data={querysumsentiment} />\n                    </>\n                  }\n                \n                </Col>\n              </Row>\n            </Container>\n            }\n          </div>\n        }\n        {!navlink && <div>\n          <OverallAnalysis\n            Overall_POI_vs_tweet_count={Overall_POI_vs_tweet_count}\n            Overall_country_vs_tweet_count={Overall_country_vs_tweet_count}\n            Overall_language_vs_tweet_count={Overall_language_vs_tweet_count}\n            v_hecitancy={v_hecitancy}\n            p_n_v_info={p_n_v_info}\n            p_n_political={p_n_political}\n            p_n_sentiment={p_n_sentiment}\n          ></OverallAnalysis>\n        </div>\n\n        }\n      </BlockUi>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\reportWebVitals.js",[],"C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\components\\OverallAnalysis.js",["47","48","49","50","51"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Bar, Doughnut, Pie } from 'react-chartjs-2';\r\nimport axios from 'axios'\r\nimport Chart from 'chart.js/auto';\r\nimport { div } from \"react-bootstrap\";\r\nfunction OverallAnalysis(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ marginLeft: \"20%\", width: \"50%\", height: \"70%\" }}>\r\n                \r\n                {props.Overall_POI_vs_tweet_count &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"12em\"}}>Plot for Overall POI tweets Count</b>\r\n                    <Bar data={props.Overall_POI_vs_tweet_count} />\r\n                </>\r\n                }\r\n            </div>\r\n            <div style={{ marginLeft: \"30%\", width: \"30%\" }}>\r\n                {props.Overall_country_vs_tweet_count &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"4em\"}}>Plot for Overall tweets per country</b>\r\n                    <Doughnut data={props.Overall_country_vs_tweet_count}></Doughnut>\r\n                    </>\r\n                }\r\n            </div>\r\n            <div style={{ marginLeft: \"30%\", width: \"30%\" }}>\r\n                {props.Overall_language_vs_tweet_count &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"4em\"}}>Plot for Overall tweets per lanuage</b>\r\n                    <Pie data={props.Overall_language_vs_tweet_count}></Pie>\r\n                    </>\r\n                }\r\n            </div>\r\n\r\n\r\n            <div style={{ marginLeft: \"20%\", width: \"50%\", height: \"70%\" }}>\r\n                {props.p_n_sentiment &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"12em\"}}>Plot for sentiment on general population tweets </b>\r\n                    <Bar data={props.p_n_sentiment} />\r\n                    </>\r\n                }\r\n\r\n            </div> \r\n             <div style={{ marginLeft: \"20%\", width: \"50%\", height: \"70%\" }}>\r\n                {props.p_n_political &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"12em\"}}>Plot for sentiment on overall political rhetoric analysis </b>\r\n                    <Bar data={props.p_n_political} />\r\n                </>\r\n                }\r\n            </div>\r\n            <div style={{ marginLeft: \"20%\", width: \"50%\", height: \"70%\" }}>\r\n                {props.p_n_v_info &&\r\n                <>\r\n                <br/>\r\n                <b style={{marginLeft:\"12em\"}}>Plot for sentiment on Vaccine Hesistancy </b>\r\n                    <Bar data={props.p_n_v_info} /></>\r\n                }\r\n            </div>\r\n            <div style={{ marginLeft: \"20%\", width: \"50%\", height: \"70%\" }}>\r\n            <>\r\n                <br/>\r\n                <b style={{marginLeft:\"8em\"}}>Plot for sentiment on persuasion against Vaccine Hesistancy </b>\r\n                {props.v_hecitancy &&\r\n                    <Bar data={props.v_hecitancy} />\r\n                }\r\n                </>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default OverallAnalysis;","C:\\Users\\Jagru\\Desktop\\IR_final\\CSE_4535_Fall_2021\\App\\tweets\\src\\components\\pagination.js",["52","53","54","55","56","57"],"import React, { useState,useEffect } from 'react'\r\nimport './pagination.css'\r\n\r\nfunction Pagination(props){\r\n    \r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageNumberLimit, setpageNumberLimit] = useState(5);\r\n    const [maxpageNumberLimit, setmaxpageNumberLimit] = useState(5);\r\n    const [minpageNumberLimit, setminpageNumberLimit] = useState(0);\r\n    \r\n    const changePage=()=>{\r\n        setCurrentPage(1)\r\n    }\r\n    console.log(props)\r\n    React.useEffect(() => {\r\n        console.log(\"hiii\")\r\n        if (props.pagination) {\r\n          setCurrentPage(1)\r\n          props.handlePagination()\r\n        }\r\n\r\n      }, [])\r\n    const handleNextbn = (e) => {\r\n        window.scrollTo(0,0)\r\n        e.preventDefault();\r\n        if(currentPage<props.pages){\r\n            setCurrentPage(currentPage + 1)\r\n            props.handlePageChange(currentPage,1)\r\n        }\r\n        // console.log(currentPage, maxpageNumberLimit)\r\n        if ((currentPage + 1) > maxpageNumberLimit) {\r\n            // console.log(\"next\")\r\n            setmaxpageNumberLimit(maxpageNumberLimit + pageNumberLimit);\r\n            setminpageNumberLimit(minpageNumberLimit + pageNumberLimit);\r\n        }\r\n    }\r\n    const handlePrevbtn = (e) => {\r\n        window.scrollTo(0,0)\r\n        e.preventDefault();\r\n        if(currentPage>1){\r\n        setCurrentPage(currentPage - 1);\r\n        props.handlePageChange(currentPage,2)\r\n        }\r\n        // console.log(currentPage  , maxpageNumberLimit)\r\n        if (currentPage>1 && (currentPage - 1) % pageNumberLimit == 0) {\r\n            // console.log(\"prev\")\r\n            setmaxpageNumberLimit(maxpageNumberLimit - pageNumberLimit)\r\n            setminpageNumberLimit(minpageNumberLimit - pageNumberLimit)\r\n        }\r\n        \r\n    }\r\n    const renderPageNumbers = Array.from(Array(props.pages), (e, i) => {\r\n        if (i + 1 < maxpageNumberLimit + 1 && i + 1 > minpageNumberLimit) {\r\n            return <li key={i} value={i + 1} id={i + 1} onClick={(e) => { e.preventDefault();setCurrentPage(Number(e.target.id)); props.handlePageChange(Number(e.target.id),0) }}\r\n                className={currentPage == i + 1 ? 'active' : null}>{i + 1}</li>\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    })\r\n    let pageIncrementBtn=null;\r\n    if(props.pages>maxpageNumberLimit){\r\n        pageIncrementBtn=<li onClick={handleNextbn}>&hellip;</li>\r\n    }\r\n    let pageDecrementBtn=null;\r\n    if(minpageNumberLimit>1){\r\n        pageDecrementBtn=<li onClick={handlePrevbtn}>&hellip;</li>\r\n    }\r\n    return (\r\n        <div>\r\n            <ul className=\"pageNumbers\">\r\n                <li>\r\n                    <button><p style={{ fontSize: \"0.7em\" }} onClick={handlePrevbtn}>Prev</p></button>\r\n                </li>\r\n                {pageDecrementBtn}\r\n                {renderPageNumbers}\r\n                {pageIncrementBtn}\r\n                <li>\r\n                    <button><p style={{ fontSize: \"0.7em\" }} onClick={handleNextbn}>Next</p></button>\r\n                </li>\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Pagination",{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":5,"column":28,"nodeType":"60","messageId":"61","endLine":5,"endColumn":43},{"ruleId":"58","severity":1,"message":"63","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":13},{"ruleId":"58","severity":1,"message":"64","line":22,"column":10,"nodeType":"60","messageId":"61","endLine":22,"endColumn":16},{"ruleId":"58","severity":1,"message":"65","line":22,"column":18,"nodeType":"60","messageId":"61","endLine":22,"endColumn":27},{"ruleId":"58","severity":1,"message":"66","line":29,"column":18,"nodeType":"60","messageId":"61","endLine":29,"endColumn":27},{"ruleId":"58","severity":1,"message":"67","line":175,"column":10,"nodeType":"60","messageId":"61","endLine":175,"endColumn":15},{"ruleId":"58","severity":1,"message":"68","line":175,"column":17,"nodeType":"60","messageId":"61","endLine":175,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":201,"column":11,"nodeType":"71","messageId":"72","endLine":201,"endColumn":13},{"ruleId":"69","severity":1,"message":"70","line":215,"column":16,"nodeType":"71","messageId":"72","endLine":215,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":228,"column":16,"nodeType":"71","messageId":"72","endLine":228,"endColumn":18},{"ruleId":"58","severity":1,"message":"73","line":266,"column":19,"nodeType":"60","messageId":"61","endLine":266,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":284,"column":22,"nodeType":"71","messageId":"72","endLine":284,"endColumn":24},{"ruleId":"69","severity":1,"message":"74","line":293,"column":32,"nodeType":"71","messageId":"72","endLine":293,"endColumn":34},{"ruleId":"69","severity":1,"message":"70","line":330,"column":22,"nodeType":"71","messageId":"72","endLine":330,"endColumn":24},{"ruleId":"69","severity":1,"message":"74","line":339,"column":32,"nodeType":"71","messageId":"72","endLine":339,"endColumn":34},{"ruleId":"69","severity":1,"message":"70","line":350,"column":14,"nodeType":"71","messageId":"72","endLine":350,"endColumn":16},{"ruleId":"69","severity":1,"message":"70","line":353,"column":19,"nodeType":"71","messageId":"72","endLine":353,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":356,"column":19,"nodeType":"71","messageId":"72","endLine":356,"endColumn":21},{"ruleId":"69","severity":1,"message":"74","line":628,"column":104,"nodeType":"71","messageId":"72","endLine":628,"endColumn":106},{"ruleId":"69","severity":1,"message":"70","line":670,"column":29,"nodeType":"71","messageId":"72","endLine":670,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":675,"column":34,"nodeType":"71","messageId":"72","endLine":675,"endColumn":36},{"ruleId":"58","severity":1,"message":"75","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"76","line":1,"column":27,"nodeType":"60","messageId":"61","endLine":1,"endColumn":36},{"ruleId":"58","severity":1,"message":"77","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":13},{"ruleId":"58","severity":1,"message":"63","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":13},{"ruleId":"58","severity":1,"message":"78","line":6,"column":10,"nodeType":"60","messageId":"61","endLine":6,"endColumn":13},{"ruleId":"58","severity":1,"message":"76","line":1,"column":26,"nodeType":"60","messageId":"61","endLine":1,"endColumn":35},{"ruleId":"58","severity":1,"message":"79","line":7,"column":29,"nodeType":"60","messageId":"61","endLine":7,"endColumn":47},{"ruleId":"58","severity":1,"message":"80","line":11,"column":11,"nodeType":"60","messageId":"61","endLine":11,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":22,"column":10,"nodeType":"83","endLine":22,"endColumn":12,"suggestions":"84"},{"ruleId":"69","severity":1,"message":"70","line":45,"column":66,"nodeType":"71","messageId":"72","endLine":45,"endColumn":68},{"ruleId":"69","severity":1,"message":"70","line":55,"column":40,"nodeType":"71","messageId":"72","endLine":55,"endColumn":42},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","'Chart' is defined but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.","'setColors' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setBaseUrl' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'div' is defined but never used.","'setpageNumberLimit' is assigned a value but never used.","'changePage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["85"],{"desc":"86","fix":"87"},"Update the dependencies array to be: [props]",{"range":"88","text":"89"},[645,647],"[props]"]